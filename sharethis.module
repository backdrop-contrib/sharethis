<?php
/**
 * @file
 * A module that adds one of the ShareThis widget to your website.
 */

/**
 * Implements hook_config_info().
 */
function sharethis_config_info() {
  $prefixes['sharethis.settings'] = array(
    'label' => t('Sharethis settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_permission().
 */
function sharethis_permission() {
  return array(
    'administer sharethis' => array(
      'title' => t('Administer ShareThis'),
      'description' => t('Change the settings for how ShareThis behaves on the site.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sharethis_menu() {
  $items['admin/config/services/sharethis'] = array(
    'title' => 'ShareThis',
    'description' => 'Choose the widget, button family, and services for using ShareThis to share content online.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('sharethis_configuration_form'),
    'access arguments' => array('administer sharethis'),
    'file' => 'sharethis.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function sharethis_node_view($node, $view_mode, $langcode) {
  // Don't display on certain view modes.
  switch ($view_mode) {
    case 'search_result':
    case 'search_index':
    case 'rss':
      return;
  }
  // First get all of the options for the sharethis widget from the database:
  $data_options = sharethis_get_options_array();

  // Get the full path to insert into the Share Buttons.
  $absolute_path = url('node/' . $node->nid, array('absolute' => TRUE));
  $page_title = $node->title;

  // Check where we want to display the ShareThis widget.
  switch (config_get('sharethis.settings', 'sharethis_location')) {
    case 'content':
      $enabled_types = $data_options['sharethis_node_types'];
      if (isset($enabled_types[$node->type]) && $enabled_types[$node->type] === $node->type) {
        // Inject the extra services.
        foreach ($data_options['option_extras'] as $service) {
          $data_options['services'] .= ',"' . $service . '"';
        }

        // The share buttons are simply spans of the form class='st_SERVICE_BUTTONTYPE' -- "st" stands for ShareThis.
        $type = backdrop_substr($data_options['buttons'], 4);
        $type = $type == "_" ? "" : check_plain($type);
        $service_array = explode(",", $data_options['services']);
        $output = "<div class='sharethis-buttons'><div class='sharethis-wrapper'>";
        foreach ($service_array as $service_full) {
          // Strip the quotes from the element in the array (They are there for javascript)
          $service = explode(":", $service_full);
          // Service names are expected to be parsed by Name:machine_name. If only one
          // element in the array is given, it's an invalid service.
          if (count($service) < 2) {
            continue;
          }

          // Find the service code name.
          $service_code_name = backdrop_substr($service[1], 0, -1);
          // Switch the title on a per-service basis if required.
          $title = $page_title;
          switch ($service_code_name) {
            case 'twitter':
              $title = empty($data_options['twitter_suffix']) ? $title : check_plain($title) . ' ' . check_plain($data_options['twitter_suffix']);
              break;
          }

          // Sanitize the service code for display.
          $display = check_plain($service_code_name);

          // Put together the span attributes.
          $output .='<span st_url="' . $absolute_path . '" st_title="' . $title . '" class="st_' . $display . $type . '"';

          if ($service_code_name == 'twitter' && !empty($data_options['twitter_handle'])) {
            $output .='<span st_via="' . $data_options['twitter_handle'] . '" st_username="' . $data_options['twitter_recommends'] . '"';
          }

          $output .='</span>';
        }
        $output .='</div></div>';

        $node->content['node'] = array(
          '#markup' => $output,
          '#weight' => intval(config_get('sharethis.settings', 'sharethis_weight')),
        );
        sharethis_include_js();
      }
    break;

    case 'links':
      $enabled_view_modes = config_get('sharethis.settings', 'sharethis_' . $node->type . '_options');
      if (isset($enabled_view_modes[$view_mode]) && $enabled_view_modes[$view_mode]) {
        $links['sharethis'] = array(
          'html' => TRUE,
          'title' => theme('sharethis', array('data_options' => $data_options, 'm_path' => $absolute_path, 'm_title' => $page_title)),
          'attributes' => array('class' => 'sharethis-buttons'),
        );
        $node->content['links']['sharethis'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#attributes' => array(
            'class' => array('links', 'inline'),
          ),
          '#tag' => 'div', // Wrap it in a div.
          '#type' => 'html_tag',
          '#weight' => intval(config_get('sharethis.settings', 'sharethis_weight')),
        );
       }
    break;
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function sharethis_field_extra_fields() {
  $extra = array();
  // Only add extra fields if the location is the node content.
  if (config_get('sharethis.settings', 'sharethis_location')) {
    $entity_info = entity_get_info('node');
    foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
      $extra['node'][$bundle]['display'] = array(
        'sharethis' => array(
          'label' => t('ShareThis'),
          'description' => t('ShareThis links'),
          'weight' => intval(config_get('sharethis.settings', 'sharethis_weight')),
        ),
      );
     }
   }
  return $extra;
}

/**
 * Implements hook_block_info().
 */
function sharethis_block_info() {
  $blocks['sharethis_block'] = array(
    'info' => t('ShareThis'),
    'cache' => BACKDROP_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements of hook_block_view().
 */
function sharethis_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'sharethis_block':
      $block['content'] = sharethis_block_contents();
      break;
  }
  return $block;
}

/**
 * Block view callback.
 *
 * @return string
 */
function sharethis_block_contents() {
  $output ='';

  // First get all of the options for the sharethis widget from the database:
  $data_options = sharethis_get_options_array();

  $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
  if ($path == config_get('system.core', 'site_frontpage')) {
    $path = "<front>";
  }
  $absolute_path = url($path, array('absolute' => TRUE));
  $page_title = decode_entities(backdrop_get_title());

  // Inject the extra services.
  foreach ($data_options['option_extras'] as $service) {
    $data_options['services'] .= ',"' . $service . '"';
  }

  // The share buttons are simply spans of the form class='st_SERVICE_BUTTONTYPE' -- "st" stands for ShareThis.
  $type = backdrop_substr($data_options['buttons'], 4);
  $type = $type == "_" ? "" : check_plain($type);
  $service_array = explode(",", $data_options['services']);
  $output = "<div class='sharethis-buttons'><div class='sharethis-wrapper'>";
  foreach ($service_array as $service_full) {
    // Strip the quotes from the element in the array (They are there for javascript)
    $service = explode(":", $service_full);
    // Service names are expected to be parsed by Name:machine_name. If only one
    // element in the array is given, it's an invalid service.
    if (count($service) < 2) {
      continue;
    }

    // Find the service code name.
    $service_code_name = backdrop_substr($service[1], 0, -1);
    // Switch the title on a per-service basis if required.
    $title = $page_title;
    switch ($service_code_name) {
      case 'twitter':
        $title = empty($data_options['twitter_suffix']) ? $title : check_plain($title) . ' ' . check_plain($data_options['twitter_suffix']);
        break;
    }

    // Sanitize the service code for display.
    $display = check_plain($service_code_name);

    // Put together the span attributes.
    $output .='<span st_url="' . $absolute_path . '" st_title="' . $title . '" class="st_' . $display . $type . '"';
    if ($service_code_name == 'twitter') {
      if (!empty($data_options['twitter_handle'])) {
        $output .='<span st_via="' . $data_options['twitter_handle'] . '" st_username="' . $data_options['twitter_recommends'] . '"';
      }
    }
    $output .='</span>';
  }
  $output .='</div></div>';

  sharethis_include_js();

  return $output;
}

/**
 * Implements hook_comment_view().
 */
function sharethis_comment_view($comment, $view_mode, $langcode) {
  if (config_get('sharethis.settings', 'sharethis_comments')) {
    $data_options = sharethis_get_options_array();
    $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
    $absolute_path = url($_GET['q'], array(
      'absolute' => TRUE,
      'fragment' => 'comment-' . $comment->cid,
    ));
    $page_title = decode_entities(backdrop_get_title());
    $html = theme('sharethis', array('data_options' => $data_options, 'm_path' => $absolute_path, 'm_title' => $page_title));
    $comment->content['sharethis'] = array(
      '#type' => 'html_tag',
      '#value' => $html,
      '#tag' => 'div',
      '#attributes' => array('class' => 'sharethis-comment'),
      '#weight' => intval(config_get('sharethis.settings', 'sharethis_weight')),
    );
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function sharethis_contextual_links_view_alter(&$element, $items) {
  // Add the configuration link for the ShareThis settings on the block itself.
  if (isset($element['#element']['#block']->module) &&
    $element['#element']['#block']->module == 'sharethis' &&
    $element['#element']['#block']->delta == 'sharethis_block' &&
    user_access('access administration pages')) {

    $element['#links']['sharethis-configure'] = array(
      'title' => t('Configure ShareThis'),
      'href' => 'admin/config/services/sharethis',
    );
  }
}

/**
 * Implements hook_views_api().
 */
function sharethis_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'sharethis') . '/views',
  );
}

/**
 * Helper function: Converts given value to boolean.
 *
 * @param (strong) $val
 *   Value to convert to boolean.
 *
 * @return (bool)
 *   Boolean equivilent.
 */
function sharethis_to_boolean($val) {
  if (strtolower(trim($val)) === 'false') {
    return FALSE;
  }
  else {
    return (boolean)$val;
  }
}

/**
 * Helper function: Creates options to be passed to stLight.options.
 *
 * @param (array) $data_options
 *   The settings selected by publisher in admin panel.
 *
 * @return  (array)
 *   Complete set of necessary settings.
 */
function sharethis_get_st_light_options($data_options) {
  // Provide the publisher ID.
  $params_share_this_light = array(
    'publisher' => $data_options['publisherID'],
  );
  $params_share_this_light['version'] = ($data_options['widget'] == 'st_multi') ? "5x" : "4x";
  if ($data_options['sharethis_callesi'] == 0){
    $params_share_this_light["doNotCopy"] = !sharethis_to_boolean($data_options['sharethis_cns']['donotcopy']);
    $params_share_this_light["hashAddressBar"] = sharethis_to_boolean($data_options['sharethis_cns']['hashaddress']);
    if (!($params_share_this_light["hashAddressBar"]) && $params_share_this_light["doNotCopy"]){
      $params_share_this_light["doNotHash"] = true;
    }
    else {
      $params_share_this_light["doNotHash"] = false;
    }
  }
  if (isset($data_options['onhover']) && $data_options['onhover'] == FALSE) {
   $params_share_this_light['onhover'] = FALSE;
  }
  if ($data_options['neworzero']) {
    $params_share_this_light['newOrZero'] = "zero";
  }
  if (!$data_options['shorten']) {
    $params_share_this_light['shorten'] = 'false';
  }
  $stlight = backdrop_json_encode($params_share_this_light);

  return $stlight;
}

/**
 * Helper function: Returns all options that have been stored in config.
 */
function sharethis_get_options_array() {
  $config = config('sharethis.settings');
  $default_sharethis_nodetypes = array("article"=>"article", "page"=>"page");
  $view_modes = array();
  foreach (array_keys(node_type_get_types()) as $type) {
    $view_modes[$type] = $config->get('sharethis_' . $type . '_options');
  }

  return array(
    'buttons' => $config->get('sharethis_button_option'),
    'publisherID' => $config->get('sharethis_publisherID'),
    'services' => $config->get('sharethis_service_option'),
    'option_extras' => $config->get('sharethis_option_extras'),
    'widget' => $config->get('sharethis_widget_option'),
    'onhover' => $config->get('sharethis_option_onhover'),
    'neworzero' => $config->get('sharethis_option_neworzero'),
    'twitter_suffix' => $config->get('sharethis_twitter_suffix'),
    'twitter_handle' => $config->get('sharethis_twitter_handle'),
    'twitter_recommends' => $config->get('sharethis_twitter_recommends'),
    'late_load' => $config->get('sharethis_late_load'),
    'view_modes' => $view_modes,
    'sharethis_cns' => $config->get('sharethis_cns'),
    'sharethis_callesi' => (NULL == $config->get('sharethis_cns'))?1:0,
    'sharethis_node_types' => $config->get('sharethis_node_types'),
    'shorten' => $config->get('sharethis_option_shorten'),
  );
}

/**
 * Helper function: Include ShareThis js scripts.
 */
function sharethis_include_js() {
  $has_run = &backdrop_static(__FUNCTION__, FALSE);
  if (!$has_run) {
    // These are the ShareThis scripts:
    $data_options = sharethis_get_options_array();
    $st_js_options = array();
    $st_js_options['switchTo5x'] = $data_options['widget'] == 'st_multi' ? TRUE : FALSE;
    if ($data_options['late_load']) {
      $st_js_options['__st_loadLate'] = TRUE;
    }
    $st_js = "";
    foreach ($st_js_options as $name => $value) {
      $st_js .= 'var ' . $name . ' = ' . backdrop_json_encode($value) . ';';
    }
    backdrop_add_js($st_js, 'inline');

    //$external = "//ws.sharethis.com/button/buttons.js";
    $external = ((isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on') ? "https://ws." : "http://w.") . "sharethis.com/button/buttons.js";
    backdrop_add_js($external, 'external');

    $stlight = sharethis_get_st_light_options($data_options);
    $st_js = "if (stLight !== undefined) { stLight.options($stlight); }";
    backdrop_add_js($st_js, 'inline');

    $has_run = TRUE;
  }
  return $has_run;
}
